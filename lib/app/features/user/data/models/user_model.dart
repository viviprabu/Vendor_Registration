import 'package:finance_app/app/features/user/domain/entities/user.dart';

class UserModel extends User {
  UserModel(
      {required super.id,
      required super.name,
      required super.userName,
      required super.email,
      required super.emailConfirmed,
      required super.phoneNumber,
      required super.mobileNumber,
      required super.officePhone,
      required super.description,
      required super.phoneNumberConfirmed,
      required super.lockoutEnd,
      required super.lockoutEnabled,
      required super.isActive,
      required super.isSuspended,
      required super.suspendReason,
      required super.role,
      required super.isDarkMode,
      required super.businessRoleId,
      required super.languageId,
      required super.roleId,
      required super.language,
      required super.dateOfBirth,
      required super.logoPath,
      required super.sectionId});

  factory UserModel.fromJson(Map<String, dynamic> json) {
    return UserModel(
      id: json["id"] ?? "",
      name: json["name"] ?? "",
      userName: json["userName"] ?? "",
      email: json["email"] ?? "",
      emailConfirmed: json["emailConfirmed"] ?? false,
      phoneNumber: json["phoneNumber"] ?? "",
      mobileNumber: json["mobileNumber"] ?? "",
      officePhone: json["officePhone"] ?? "",
      description: json["description"] ?? "",
      phoneNumberConfirmed: json["phoneNumberConfirmed"] ?? false,
      lockoutEnd: json["lockoutEnd"] ?? "",
      lockoutEnabled: json["lockoutEnabled"] ?? false,
      isActive: json["isActive"] ?? false,
      isSuspended: json["isSuspended"] ?? false,
      suspendReason: json["suspendReason"] ?? "",
      role: json["role"] ?? "",
      isDarkMode: json["isDarkMode"] ?? false,
      businessRoleId: json["businessRoleId"] ?? 0,
      languageId: json["languageId"] ?? 0,
      roleId: json["roleId"] ?? 0,
      language: json["language"] ?? "",
      dateOfBirth: json["dateOfBirth"] ?? "",
      logoPath: json["logoPath"] ?? "",
      sectionId: json["sectionId"] ?? 0,
    );
  }

  Map<String, dynamic> toJson() => {
        "id": id,
        "name": name,
        "userName": userName,
        "email": email,
        "emailConfirmed": emailConfirmed,
        "phoneNumber": phoneNumber,
        "mobileNumber": mobileNumber,
        "officePhone": officePhone,
        "description": description,
        "phoneNumberConfirmed": phoneNumberConfirmed,
        "lockoutEnd": lockoutEnd,
        "lockoutEnabled": lockoutEnabled,
        "isActive": isActive,
        "isSuspended": isSuspended,
        "suspendReason": suspendReason,
        "role": role,
        "isDarkMode": isDarkMode,
        "businessRoleId": businessRoleId,
        "languageId": languageId,
        "roleId": roleId,
        "language": language,
        "dateOfBirth": dateOfBirth,
        "logoPath": logoPath,
        "sectionID": sectionId
      };

  factory UserModel.fromEntity(User user) {
    return UserModel(
        id: user.id,
        name: user.name,
        userName: user.userName,
        email: user.email,
        emailConfirmed: user.emailConfirmed,
        phoneNumber: user.phoneNumber,
        mobileNumber: user.mobileNumber,
        officePhone: user.officePhone,
        description: user.description,
        phoneNumberConfirmed: user.phoneNumberConfirmed,
        lockoutEnd: user.lockoutEnd,
        lockoutEnabled: user.lockoutEnabled,
        isActive: user.isActive,
        isSuspended: user.isSuspended,
        suspendReason: user.suspendReason,
        role: user.role,
        isDarkMode: user.isDarkMode,
        businessRoleId: user.businessRoleId,
        languageId: user.languageId,
        roleId: user.roleId,
        language: user.language,
        dateOfBirth: user.dateOfBirth,
        logoPath: user.logoPath,
        sectionId: user.sectionId);
  }

  User toEntity() {
    return User(
        id: id,
        name: name,
        userName: userName,
        email: email,
        emailConfirmed: emailConfirmed,
        phoneNumber: phoneNumber,
        mobileNumber: mobileNumber,
        officePhone: officePhone,
        description: description,
        phoneNumberConfirmed: phoneNumberConfirmed,
        lockoutEnd: lockoutEnd,
        lockoutEnabled: lockoutEnabled,
        isActive: isActive,
        isSuspended: isSuspended,
        suspendReason: suspendReason,
        role: role,
        isDarkMode: isDarkMode,
        businessRoleId: businessRoleId,
        languageId: languageId,
        roleId: roleId,
        sectionId: sectionId);
  }
}
